part of targets_cli;

String buildTestsDart(var config) {
    String tests;
    if (config['language'] == 'java') {
        tests = buildJava(config['tests']);
    } else {
        throw new Exception("Language '${config['language']}' is not supported by testbuilder");
    }
    encode(prop) => JSON.encode(config[prop]);
    return """/// Autogenerated by Targets - Edit tests.json instead of this file
import 'helpers.dart';
final String name = ${encode('name')};
final String owner = ${encode('owner')};
final String id = ${encode('id')};
final List<String> files = ${encode('files')};
List<Target> getTargets() {
    var targets = [];
    ${tests}
    return targets;
}
""";
}

String buildJava(var tests) {
    var compiles = {};
    for (var test in tests) {
        if (compiles.containsKey(test['run'])) {
            compiles[test['run']].add(test);
        } else {
            compiles[test['run']] = [test];
        }
    }
    
    String output = "";
    for (var comp in compiles.keys) {
        if (!comp.endsWith('.java')) throw new Exception("$comp is not a Java file");
        var noext = comp.substring(0, comp.length - 5);
        String ios = "";
        for (var test in compiles[comp]) {
            encode(prop) => JSON.encode(test[prop]);
            if (test.containsKey('args') && test.containsKey('input')) {
                ios += 'new InputOutput.withArgsInput(${encode("name")}, ${encode("args")}, ${encode("input")}, ${encode("output")}, ${encode("points")})';
            } else if (test.containsKey('args')) {
                ios += 'new InputOutput.withArgs(${encode("name")}, ${encode("args")}, ${encode("output")}, ${encode("points")})';
            } else if (test.containsKey('input')) {
                ios += 'new InputOutput(${encode("name")}, ${encode("input")}, ${encode("output")}, ${encode("points")})';
            } else {
                ios += 'new InputOutput(${encode("name")}, "", ${encode("output")}, ${encode("points")})';
            }
            ios += ', ';
        }
        output += "targets.addAll(IOTarget.makeMultiJava(${JSON.encode(noext)}, [$ios]));";
    }
    return output;
}
